@page "/"

@using Extensions;
@using System.Threading;

<style>
    .tttbutton {
        height: 100px;
        width: 100px;
        margin: 5px;
    }

    .tttfont {
        font-size: 60px;
    }

    .btn:focus {
        outline: none;
    }

    .first-row {
        padding-top: 10px;
    }

    .win-message {
        margin-top: 1%;
    }

    .new-game-buttons {
        margin-top: 1%;
    }

    .alert-custom {
        background-color: #69e649;
        color: #fff;
    }
</style>

<h1>Tic Tac Toe</h1>
<hr />

<div class="container">

    <div class="game-board">
        <div class="row first-row">
            <button id="btn1" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(0))">@game[0]</button>
            <button id="btn2" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(1))">@game[1]</button>
            <button id="btn3" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(2))">@game[2]</button>
        </div>
        <div class="row">
            <button id="btn1" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(3))">@game[3]</button>
            <button id="btn2" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(4))">@game[4]</button>
            <button id="btn3" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(5))">@game[5]</button>
        </div>
        <div class="row">
            <button id="btn1" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(6))">@game[6]</button>
            <button id="btn2" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(7))">@game[7]</button>
            <button id="btn3" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(8))">@game[8]</button>
        </div>
    </div>
    <div class="row new-game-buttons">
        <button id="btn-new-game" class="btn btn-primary m-1" @onclick="NewGame">New Game</button>
        <button id="btn-new-game" class="btn btn-primary m-1" @onclick="BotSetup">Player vs Bot</button>
        <button id="btn-new-game" class="btn btn-primary m-1" @onclick="HumanSetup">Player vs Human</button>
    </div>
    <div class="row win-message">
        @if (oWon)
        {
            <div class="alert alert-custom" role="alert">@playerOWins</div>
        }
        @if (xWon)
        {
            <div class="alert alert-custom" role="alert">@playerXWins</div>
        }
        @if (catGame)
        {
            <div class="alert alert-custom" role="alert">@playerCatGame</div>
        }
    </div>
</div>

@code {

    int turnCount;
    string[] game;
    string O;
    string X;
    bool botgame;
    bool botturn;
    MarkupString playerOWins;
    MarkupString playerXWins;
    MarkupString playerCatGame;
    bool xWon;
    bool oWon;
    bool catGame;
    bool gameover;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(NewGame);

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (botturn)
        {
            BotPlay();
            StateHasChanged();
        }
    }


    void NewGame()
    {

        turnCount = 0;
        game = new string[9];
        O = "O";
        X = "X";
        botgame = true;
        botturn = false;
        playerOWins = new MarkupString();
        playerXWins = new MarkupString();
        playerCatGame = new MarkupString();
        oWon = false;
        xWon = false;
        catGame = false;
        gameover = false;
        for (var i = 0; i < game.Length; i++)
            game[i] = string.Empty;
    }

    void BotSetup()
    {
        botgame = true;
        botturn = false;
        gameover = false;
        NewGame();
    }

    void HumanSetup()
    {
        botgame = false;
        botturn = false;
        NewGame();
    }

    void GameClick(int i)
    {
        if (gameover)
            return;

        if (!string.IsNullOrEmpty(game[i]))
            return;

        if (turnCount.isEven())
        {
            game[i] = X;
            if (PlayerXWin())
                return;

            if (PlayerCatGame())
                return;

            if (botgame)
                botturn = true;
        }
        else
        {
            game[i] = O;
            if (PlayerOWin())
                return;

            if (PlayerCatGame())
                return;

        }
        turnCount++;
    }

    protected void BotPlay()
    {
        if (!botgame)
            return;

        if (gameover)
            return;

        var rng = new Random();
        Thread.Sleep(rng.Next(100, 3000));


        // 0 1 2
        // 3 4 5
        // 6 7 8
        bool shouldSetMiddle = string.IsNullOrEmpty(game[4]) || game.ShouldSetMiddle();
        if (shouldSetMiddle)
        {
            game[4] = O;
        }
        else if (game.ShouldSetUpperLeft())
            game[0] = O;
        else if (game.ShouldSetUpperMiddle())
            game[1] = O;
        else if (game.ShouldSetUpperRight())
            game[2] = O;
        else if (game.ShouldSetLeftMiddle())
            game[3] = O;
        else if (game.ShouldSetRightMiddle())
            game[5] = O;
        else if (game.ShouldSetLowerLeft())
            game[6] = O;
        else if (game.ShouldSetLowerMiddle())
            game[7] = O;
        else if (game.ShouldSetLowerRight())
            game[8] = O;
        else
        {

            var randomEmpty = Array.IndexOf(game, string.Empty, rng.Next(0, 8));
            game[randomEmpty] = O;

        }

        turnCount++;
        botturn = false;

        if (PlayerOWin())
            return;

        if (PlayerCatGame())
            return;
    }

    private bool PlayerOWin()
    {
        if (game.OWins())
        {
            playerOWins = new MarkupString("<strong>Game Over:</strong> Player O has won the game!");
            oWon = true;
            gameover = true;
            return true;
        }
        return false;
    }

    private bool PlayerXWin()
    {
        if (game.XWins())
        {
            playerXWins = new MarkupString("<strong>Game Over:</strong> Player X has won the game!");
            xWon = true;
            gameover = true;
            return true;
        }
        return false;
    }

    private bool PlayerCatGame()
    {
        if (game.CatGame())
        {
            playerCatGame = new MarkupString("<strong>Game Over:</strong> Cat game! Everyone wins!");
            catGame = true;
            gameover = true;
            return true;
        }
        return false;
    }
}

