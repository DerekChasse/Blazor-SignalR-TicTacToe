@page "/"

@using Extensions;
@using System.Threading;
@using Data;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager
@inject GameModelService GameModelService

<style>
    .tttbutton {
        height: 100px;
        width: 100px;
        margin: 5px;
    }

    .tttfont {
        font-size: 60px;
    }

    .btn:focus {
        outline: none;
    }

    .first-row {
        padding-top: 10px;
    }

    .win-message {
        margin-top: 1%;
    }

    .new-game-buttons {
        margin-top: 1%;
    }

    .alert-custom {
        background-color: #69e649;
        color: #fff;
    }
</style>

<h1>Tic Tac Toe</h1>
<hr />

<div class="container">

    <div class="game-board">
        <div class="row first-row">
            <button id="btn1" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(0))">@gamesettings.Game[0]</button>
            <button id="btn2" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(1))">@gamesettings.Game[1]</button>
            <button id="btn3" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(2))">@gamesettings.Game[2]</button>
        </div>
        <div class="row">
            <button id="btn1" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(3))">@gamesettings.Game[3]</button>
            <button id="btn2" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(4))">@gamesettings.Game[4]</button>
            <button id="btn3" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(5))">@gamesettings.Game[5]</button>
        </div>
        <div class="row">
            <button id="btn1" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(6))">@gamesettings.Game[6]</button>
            <button id="btn2" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(7))">@gamesettings.Game[7]</button>
            <button id="btn3" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(8))">@gamesettings.Game[8]</button>
        </div>
    </div>
    <div class="row new-game-buttons">
        <button id="btn-new-game" class="btn btn-primary m-1" @onclick="NewGame">New Game</button>
        <button id="btn-new-game" class="btn btn-primary m-1" @onclick="BotSetup">Player vs Bot</button>
        <button id="btn-new-game" class="btn btn-primary m-1" @onclick="HumanSetup">Player vs Human</button>
    </div>
    <div class="row win-message">
        @if (gamesettings.OWon)
        {
            <div class="alert alert-custom" role="alert">@gamesettings.PlayerOWins</div>
        }
        @if (gamesettings.XWon)
        {
            <div class="alert alert-custom" role="alert">@gamesettings.PlayerXWins</div>
        }
        @if (gamesettings.CatGame)
        {
            <div class="alert alert-custom" role="alert">@gamesettings.PlayerCatGame</div>
        }
    </div>
</div>

@code {

    private HubConnection _hubConnection;
    private GameModel gamesettings;
    string O = "O";
    string X = "X";

    protected override async Task OnInitializedAsync()
    {
        gamesettings = await GameModelService.GetGameBoardAsync();
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gameHub"))
            .Build();

        _hubConnection.On<GameModel>("ReceiveMessage", (_gamesettings) =>
        {
            gamesettings = _gamesettings;
            if (gamesettings.Botturn) { BotPlay(); Send(); }
            StateHasChanged();
        });

        await _hubConnection.StartAsync();


    }


    Task Send() =>
        _hubConnection.SendAsync("SendMessage", gamesettings);

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;

    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (gamesettings.Botturn)
    //    {
    //        BotPlay();
    //       // StateHasChanged();          
    //    }
    //     Send();
    //}


    public async Task NewGame()
    {
        gamesettings = await GameModelService.GetGameBoardAsync();
    }

    public async Task BotSetup()
    {
        gamesettings = await GameModelService.GetGameBoardAsync();
        gamesettings.Botgame = true;
    }

    public async Task HumanSetup()
    {
        gamesettings = await GameModelService.GetGameBoardAsync();
        gamesettings.Botgame = false;
    }

    void GameClick(int i)
    {
        if (gamesettings.Gameover)
            return;

        if (!string.IsNullOrEmpty(gamesettings.Game[i]))
            return;

        if (gamesettings.TurnCount.isEven())
        {
            gamesettings.Game[i] = X;
            if (PlayerXWin())
                return;

            if (PlayerCatGame())
                return;

            if (gamesettings.Botgame)
                gamesettings.Botturn = true;
        }
        else
        {
            gamesettings.Game[i] = O;
            if (PlayerOWin())
                return;

            if (PlayerCatGame())
                return;

        }
        gamesettings.TurnCount++;
        Send();
    }

    protected void BotPlay()
    {
        if (!gamesettings.Botgame)
            return;

        if (gamesettings.Gameover)
            return;

        var rng = new Random();
        Thread.Sleep(rng.Next(100, 3000));


        // 0 1 2
        // 3 4 5
        // 6 7 8
        bool shouldSetMiddle = string.IsNullOrEmpty(gamesettings.Game[4]) || gamesettings.Game.ShouldSetMiddle();
        if (shouldSetMiddle)
        {
            gamesettings.Game[4] = O;
        }
        else if (gamesettings.Game.ShouldSetUpperLeft())
            gamesettings.Game[0] = O;
        else if (gamesettings.Game.ShouldSetUpperMiddle())
            gamesettings.Game[1] = O;
        else if (gamesettings.Game.ShouldSetUpperRight())
            gamesettings.Game[2] = O;
        else if (gamesettings.Game.ShouldSetLeftMiddle())
            gamesettings.Game[3] = O;
        else if (gamesettings.Game.ShouldSetRightMiddle())
            gamesettings.Game[5] = O;
        else if (gamesettings.Game.ShouldSetLowerLeft())
            gamesettings.Game[6] = O;
        else if (gamesettings.Game.ShouldSetLowerMiddle())
            gamesettings.Game[7] = O;
        else if (gamesettings.Game.ShouldSetLowerRight())
            gamesettings.Game[8] = O;
        else
        {

            var randomEmpty = Array.IndexOf(gamesettings.Game, string.Empty, rng.Next(0, 8));
            gamesettings.Game[randomEmpty] = O;

        }

        gamesettings.TurnCount++;
        gamesettings.Botturn = false;

        if (PlayerOWin())
            return;

        if (PlayerCatGame())
            return;
    }

    private bool PlayerOWin()
    {
        if (gamesettings.Game.OWins())
        {
            gamesettings.PlayerOWins = new MarkupString("<strong>Game Over:</strong> Player O has won the game!");
            gamesettings.OWon = true;
            gamesettings.Gameover = true;
            return true;
        }
        return false;
    }

    private bool PlayerXWin()
    {
        if (gamesettings.Game.XWins())
        {
            gamesettings.PlayerXWins = new MarkupString("<strong>Game Over:</strong> Player X has won the game!");
            gamesettings.XWon = true;
            gamesettings.Gameover = true;
            return true;
        }
        return false;
    }

    private bool PlayerCatGame()
    {
        if (gamesettings.Game.CatGame())
        {
            gamesettings.PlayerCatGame = new MarkupString("<strong>Game Over:</strong> Cat game! Everyone wins!");
            gamesettings.CatGame = true;
            gamesettings.Gameover = true;
            return true;
        }
        return false;
    }
}

