@page "/"

@using Extensions;
@using System.Threading;
@using Data;
@using Microsoft.AspNetCore.SignalR.Client;
@using Hubs;

@inject NavigationManager NavigationManager
@inject GameModelService GameModelService
@inject GameHub GameHub

<style>
    .tttbutton {
        height: 100px;
        width: 100px;
        margin: 5px;
    }

    .tttfont {
        font-size: 60px;
    }

    .btn:focus {
        outline: none;
    }

    .first-row {
        padding-top: 10px;
    }

    .win-message {
        margin-top: 1%;
    }

    .new-game-buttons {
        margin-top: 1%;
    }

    .alert-custom {
        background-color: #69e649;
        color: #fff;
    }
</style>

<h1>Tic Tac Toe</h1>
<hr />

<div class="container">

    <div class="game-board">
        <div class="row first-row">
            <button id="btn1" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(0))">@_gamesettings.Game[0]</button>
            <button id="btn2" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(1))">@_gamesettings.Game[1]</button>
            <button id="btn3" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(2))">@_gamesettings.Game[2]</button>
        </div>
        <div class="row">
            <button id="btn1" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(3))">@_gamesettings.Game[3]</button>
            <button id="btn2" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(4))">@_gamesettings.Game[4]</button>
            <button id="btn3" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(5))">@_gamesettings.Game[5]</button>
        </div>
        <div class="row">
            <button id="btn1" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(6))">@_gamesettings.Game[6]</button>
            <button id="btn2" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(7))">@_gamesettings.Game[7]</button>
            <button id="btn3" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(8))">@_gamesettings.Game[8]</button>
        </div>
    </div>
    <div class="row new-game-buttons">
        <button id="btn-new-game" class="btn btn-primary m-1" @onclick="NewBotGameClick">New Player vs Bot Game</button>
        <button id="btn-new-game" class="btn btn-primary m-1" @onclick="NewHumanGameClick">New Player vs Human Game</button>
    </div>
    <div class="row">
        <span>Is Connected = @_hubConnection.State</span>
    </div>
    <div class="row">
    @if (_gamesettings.PlayerXTurn)
    {
        <div class="alert alert-light" role="alert">Player X Turn</div>
    }
    @if (_gamesettings.PlayerOTurn)
    {
        <div class="alert alert-light" role="alert">Player O Turn</div>
    }
</div>
    <div class="alert alert-custom" role="alert">@_gamesettings.PlayerOTurn</div>
    <div class="row win-message">
        @if (_gamesettings.OWon)
        {
            <div class="alert alert-custom" role="alert">@_gamesettings.PlayerOWins</div>
        }
        @if (_gamesettings.XWon)
        {
            <div class="alert alert-custom" role="alert">@_gamesettings.PlayerXWins</div>
        }
        @if (_gamesettings.CatGame)
        {
            <div class="alert alert-custom" role="alert">@_gamesettings.PlayerCatGame</div>
        }
    </div>
</div>

@code {

    private HubConnection _hubConnection;
    private GameModel _gamesettings;

    protected override async Task OnInitializedAsync()
    {
        //_gamesettings = await GameModelService.GetHumanGameBoardAsync();
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gameHub"))
            .Build();


        _hubConnection.On<GameModel>(ClientEndpoints.NewHumanGame, (gamesettings) =>
        {
            _gamesettings = gamesettings;
            StateHasChanged();
        });

        _hubConnection.On<GameModel>(ClientEndpoints.NewBotGame, (gamesettings) =>
        {
            _gamesettings = gamesettings;
            StateHasChanged();
        });

        _hubConnection.On<GameModel>(ClientEndpoints.NextTurn, async (gamesettings) =>
        {
            _gamesettings = gamesettings;
            await GameHub.HandleGameOver();
            if (!gamesettings.Gameover)
            {
                if (gamesettings.Botturn) { GameHub.TakeBotTurn(); }
            }
            StateHasChanged();
        });

        _hubConnection.On<GameModel>(ClientEndpoints.GameOver, (gamesettings) =>
        {
            gamesettings = _gamesettings;
            StateHasChanged();
        });


        await _hubConnection.StartAsync();
        await Send();
    }

    Task Send() =>
        _hubConnection.SendAsync("SendMessage", _gamesettings);

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;

    //protected override void OnAfterRender(bool firstRender)
    //{
    //    if (gamesettings.Botturn)
    //    {
    //        BotPlay();
    //       // StateHasChanged();
    //    }
    //     Send();
    //}


    public async Task NewBotGameClick() => await GameHub.NewBotGame();
    public async Task NewHumanGameClick() => await GameHub.NewHumanGame();


    public async Task GameClick(int i)
    {
        if (!_gamesettings.Gameover && string.IsNullOrEmpty(_gamesettings.Game[i]))
            await _hubConnection.SendAsync(ServerEndpoints.PlayerMove, i, _gamesettings);
    }

}

