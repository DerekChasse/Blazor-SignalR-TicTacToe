@page "/tictactoe"

@using Extensions;
@using System.Threading;

<style>
    .tttbutton {
        height: 100px;
        width: 100px;
        margin: 5px;
    }

    .tttfont {
        font-size: 60px;
    }

    .btn:focus {
        outline: none;
    }
</style>

<h1>Tic Tac Toe</h1>
<hr />

<div class="row p-md-3">
    <div class="alert alert-success" role="alert">@playerOWins</div>
    <div class="alert alert-success" role="alert">@playerXWins</div>
</div>
<div class="row">
    <button id="btn1" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(0))">@game[0]</button>
    <button id="btn2" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(1))">@game[1]</button>
    <button id="btn3" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(2))">@game[2]</button>
</div>
<div class="row">
    <button id="btn1" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(3))">@game[3]</button>
    <button id="btn2" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(4))">@game[4]</button>
    <button id="btn3" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(5))">@game[5]</button>
</div>
<div class="row">
    <button id="btn1" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(6))">@game[6]</button>
    <button id="btn2" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(7))">@game[7]</button>
    <button id="btn3" class="btn btn-outline-info tttbutton tttfont" @onclick="(() => GameClick(8))">@game[8]</button>
</div>
<div class="p-md-3"></div>
<div class="row">
    <button id="btn-new-game" class="btn btn-primary m-1" @onclick="NewGame">New Game</button>
    <button id="btn-new-game" class="btn btn-primary m-1" @onclick="BotSetup">Play Against Bot</button>
    <button id="btn-new-game" class="btn btn-primary m-1" @onclick="HumanSetup">Play Against Human</button>
</div>


@code {

    int turnCount = 0;
    string[] game = new string[9];
    string O = "O";
    string X = "X";
    bool botgame = true;
    bool botturn = false;
    string playerOWins = string.Empty;
    string playerXWins = string.Empty;
    bool gameover = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(NewGame);

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (botturn)
        {
            BotPlay();
            StateHasChanged();
        }
    }


    void NewGame()
    {
        turnCount = 0;
        gameover = false;
        playerOWins = string.Empty;
        playerXWins = string.Empty;
        for (var i = 0; i < game.Length; i++)
            game[i] = string.Empty;
    }

    void BotSetup()
    {
        botgame = true;
        botturn = false;
        gameover = false;
        NewGame();
    }

    void HumanSetup()
    {
        botgame = false;
        botturn = false;
        NewGame();
    }

    void GameClick(int i)
    {
        if (gameover)
            return;

        if (turnCount.isEven())
        {

            game[i] = X;

            if (game.XWins())
            {
                playerXWins = "Player X has won the game!";
                gameover = true;
                return;
            }

            if (botgame)
            {
                botturn = true;
            }
        }
        else
        {
            game[i] = O;
        }
        turnCount++;
    }

    protected void BotPlay()
    {
        if (!botgame)
            return;

        if (gameover)
            return;

        var rng = new Random();
        Thread.Sleep(rng.Next(100, 3000));


        // 0 1 2
        // 3 4 5
        // 6 7 8
        bool shouldSetMiddle = string.IsNullOrEmpty(game[4]) || game.ShouldSetMiddle();
        if (shouldSetMiddle)
        {
            game[4] = O;
        }
        else if (game.ShouldSetUpperLeft())
            game[0] = O;
        else if (game.ShouldSetUpperMiddle())
            game[1] = O;
        else if (game.ShouldSetUpperRight())
            game[2] = O;
        else if (game.ShouldSetLeftMiddle())
            game[3] = O;
        else if (game.ShouldSetRightMiddle())
            game[5] = O;
        else if (game.ShouldSetLowerLeft())
            game[6] = O;
        else if (game.ShouldSetLowerMiddle())
            game[7] = O;
        else if (game.ShouldSetLowerRight())
            game[8] = O;
        else
        {

            var randomEmpty = Array.IndexOf(game, string.Empty, rng.Next(0, 8));
            game[randomEmpty] = O;

        }

        turnCount++;
        botturn = false;

        if (game.OWins())
        {
            playerOWins = "Player O has won!";
            gameover = true;
            return;
        }
    }
}

