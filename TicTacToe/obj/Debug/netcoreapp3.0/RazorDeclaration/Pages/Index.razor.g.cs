#pragma checksum "D:\Programming\TicTacToe\TicTacToe\TicTacToe\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a092d2591a5864f979b3f76ea3e288e53fa2ea1a"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TicTacToe.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Programming\TicTacToe\TicTacToe\TicTacToe\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Programming\TicTacToe\TicTacToe\TicTacToe\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Programming\TicTacToe\TicTacToe\TicTacToe\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Programming\TicTacToe\TicTacToe\TicTacToe\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Programming\TicTacToe\TicTacToe\TicTacToe\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Programming\TicTacToe\TicTacToe\TicTacToe\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Programming\TicTacToe\TicTacToe\TicTacToe\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Programming\TicTacToe\TicTacToe\TicTacToe\_Imports.razor"
using TicTacToe;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Programming\TicTacToe\TicTacToe\TicTacToe\_Imports.razor"
using TicTacToe.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Programming\TicTacToe\TicTacToe\TicTacToe\Pages\Index.razor"
using Extensions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Programming\TicTacToe\TicTacToe\TicTacToe\Pages\Index.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 69 "D:\Programming\TicTacToe\TicTacToe\TicTacToe\Pages\Index.razor"
       

    int turnCount;
    string[] game;
    string O;
    string X;
    bool botgame;
    bool botturn;
    string playerOWins;
    string playerXWins;
    string playerCatGame;
    bool xWon;
    bool oWon;
    bool catGame;
    bool gameover;

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(NewGame);

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (botturn)
        {
            BotPlay();
            StateHasChanged();
        }
    }


    void NewGame()
    {
        
        turnCount = 0;
        game = new string[9];
        O = "O";
        X = "X";
        botgame = true;
        botturn = false;
        playerOWins = string.Empty;
        playerXWins = string.Empty;
        playerCatGame = string.Empty;
        oWon = false;
        xWon = false;
        catGame = false;
        gameover = false;
        for (var i = 0; i < game.Length; i++)
            game[i] = string.Empty;
    }

    void BotSetup()
    {
        botgame = true;
        botturn = false;
        gameover = false;
        NewGame();
    }

    void HumanSetup()
    {
        botgame = false;
        botturn = false;
        NewGame();
    }

    void GameClick(int i)
    {
        if (gameover)
            return;

        if (!string.IsNullOrEmpty(game[i]))
            return;

        if (turnCount.isEven())
        {
            game[i] = X;
            if (PlayerXWin())
                return;

            if (PlayerCatGame())
                return;

            if (botgame)
                botturn = true;           
        }
        else
        {
            game[i] = O;
            if (PlayerOWin())
                return;

            if (PlayerCatGame())
                return;

        }
        turnCount++;
    }

    protected void BotPlay()
    {
        if (!botgame)
            return;

        if (gameover)
            return;

        var rng = new Random();
        Thread.Sleep(rng.Next(100, 3000));


        // 0 1 2
        // 3 4 5
        // 6 7 8
        bool shouldSetMiddle = string.IsNullOrEmpty(game[4]) || game.ShouldSetMiddle();
        if (shouldSetMiddle)
        {
            game[4] = O;
        }
        else if (game.ShouldSetUpperLeft())
            game[0] = O;
        else if (game.ShouldSetUpperMiddle())
            game[1] = O;
        else if (game.ShouldSetUpperRight())
            game[2] = O;
        else if (game.ShouldSetLeftMiddle())
            game[3] = O;
        else if (game.ShouldSetRightMiddle())
            game[5] = O;
        else if (game.ShouldSetLowerLeft())
            game[6] = O;
        else if (game.ShouldSetLowerMiddle())
            game[7] = O;
        else if (game.ShouldSetLowerRight())
            game[8] = O;
        else
        {

            var randomEmpty = Array.IndexOf(game, string.Empty, rng.Next(0, 8));
            game[randomEmpty] = O;

        }

        turnCount++;
        botturn = false;

        if (PlayerOWin())
            return;

        if (PlayerCatGame())
            return;
    }

    private bool PlayerOWin()
    {
        if (game.OWins())
        {
            playerOWins = "Player O has won!";
            oWon = true;
            gameover = true;
            return true;
        }
        return false;
    }

    private bool PlayerXWin()
    {
        if (game.XWins())
        {
            playerXWins = "Player X has won the game!";
            xWon = true;
            gameover = true;
            return true;
        }
        return false;
    }

    private bool PlayerCatGame()
    {
        if (game.CatGame())
        {
            playerCatGame = "Cat game, everyone wins!";
            catGame = true;
            gameover = true;
            return true;
        }
        return false;
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
